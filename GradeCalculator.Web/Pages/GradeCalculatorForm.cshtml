@page
@model GradeCalculator.Web.Pages.GradeCalculatorForm

@{
    #region MIT License

    /*
     * Copyright (c) 2024 Glenn Alon
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     */

    #endregion

    ViewData["Title"] = "Grade Calculator Form";
}
<div id="app">
    <div class="col-md-12">
        <div class="form-group border p-3" style="margin-bottom:10px;">
            <p>
                <label class="col-sm-3 col-md-12 control-label text-primary border-bottom required">
                    <b>Student Information</b>
                </label>
            </p>
            <div class="mb-1" id="personalInformation">
                <ul>
                    <li>Name: {{ studentName }}</li>
                    <li>Level / Year: {{ yearLevel }}</li>
                    <li>Program: {{ program }}</li>
                    <li>Term: {{ term }}</li>
                    <li>General Weighted Average: {{ gwa.toFixed(2) }}</li>
                </ul>
            </div>

        </div>
    </div>
    <div class="row">
        @{
            foreach (var courseItem in Model.courseModel.GetCourse())
            {
                <div class="col-md-6">
                    <form class="form-horizontal grade-form" id="gradeForm" method="post">
                        <div class="form-group border p-3" style="margin-bottom:10px;">
                            <p>
                                <label class="col-sm-3 col-md-12 control-label text-primary border-bottom required">
                                    <b>@courseItem.CourseName</b>
                                </label>
                            </p>
                            <div class="mb-1">
                                <table class="table">
                                    <thead>
                                    <tr class="table-active">
                                        <th scope="col">Prelims</th>
                                        <th scope="col">Midterms</th>
                                        <th scope="col">Pre-finals</th>
                                        <th scope="col">Finals</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    <tr>
                                        <td>
                                            <div class="col-md-7">
                                                <input type="number" step=".01" class="form-control w-100" id="inputPrelims" name="inputPrelims">
                                            </div>
                                        </td>
                                        <td>
                                            <div class="col-md-7">
                                                <input type="number" step=".01" class="form-control w-100" id="inputMidterms" name="inputMidterms">
                                            </div>
                                        </td>
                                        <td>
                                            <div class="col-md-7">
                                                <input type="number" step=".01" class="form-control w-100" id="inputPrefinals" name="inputPrefinals">
                                            </div>
                                        </td>
                                        <td>
                                            <div class=" col-md-7">
                                                <input type="number" step=".01" class="form-control w-100" id="inputFinals" name="inputFinals">
                                            </div>
                                        </td>
                                    </tr>
                                    </tbody>
                                </table>
                            </div>
                            <input type="hidden" name="studentName" v-bind:value="studentName">
                            <input type="hidden" name="courseName" value="@courseItem.CourseName">
                            <label id="result">
                                <button type="submit" class="btn btn-primary">Submit</button>
                            </label>
                        </div>
                    </form>
                </div>
            }
        }
    </div>
</div>

<!-- Import Vue App -->
<script src="js/main.js"></script>

<!-- Render the scripts asynchronously -->
@section Scripts {
    <script>
        // Creating a Vue App instance
        const mountedApp = app.mount('#app');
        // Assigning values to Vue App instance's variables
        mountedApp.setStudentName("@Model.studentInformationModel.StudentName");
        mountedApp.setYearLevel("@Model.GetLevelName(Model.studentInformationModel.LevelID)");
        mountedApp.setProgram("@Model.GetProgramName(Model.studentInformationModel.ProgramID)");
        mountedApp.setTerm("@Model.GetTermName(Model.studentInformationModel.TermID)");
        
        // Assign a NodeList for every grade-form class items
        const forms = document.querySelectorAll('.grade-form');
        
        forms.forEach(form => {
            const inputPrelims = form.querySelector('input[name="inputPrelims"]');
            const inputMidterms = form.querySelector('input[name="inputMidterms"]');
            const inputPrefinals =form.querySelector('input[name="inputPrefinals"]');
            const inputFinals = form.querySelector('input[name="inputFinals"]');
            form.addEventListener('submit', (e) => {
                // Prevents the default action of a POST method to refresh the page
                e.preventDefault();

                const formData = new FormData(form);
                // Refers to the CalculateFinalGrade() method from the GradeCalculatorForm
                const url = '@Url.Page("GradeCalculatorForm", "CalculateFinalGrade")';

                fetch(url, {
                    method: 'POST',
                    body: formData,
                })
                    .then(response => response.json())
                    .then((data) => {
                        // Update the page dynamically with the response data
                        const resultElement = form.querySelector('#result');
                        resultElement.innerHTML = `<strong>Final Grade: ${data.finalGrade}</strong>`;
                        
                        // Disable the text input elements
                        inputPrelims.disabled = true;
                        inputMidterms.disabled = true;
                        inputPrefinals.disabled = true;
                        inputFinals.disabled = true;
                        
                        // Retrieves the Final Grade from the back-end
                        let final_grade = data.finalGrade;
                        // Add the Final Grade to a grade list
                        mountedApp.pushGrade(final_grade);
                        
                        // Compute the average from the grade list, which serves as the General Weighted Average
                        let GWA = mountedApp.gradeList.reduce((a, b) => a + b, 0) / mountedApp.gradeList.length;
                        
                        // Round off the result
                        GWA = Math.round(GWA * 100) / 100;
                        
                        // Update the GWA
                        mountedApp.setGWA(GWA);
                    })
                    .catch((error) => {
                        console.error(error);
                    });
            });
        });
    </script>
}